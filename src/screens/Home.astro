---
import TechIcon from '../components/TechIcon.astro';
import HTMLIcon from '../assets/HTMLIcon.astro';
import NodeIcon from '../assets/NodeIcon.astro';
import TypescriptIcon from '../assets/TypescriptIcon.astro';
import CSSIcon from '../assets/CSSIcon.astro';
import ReactIcon from '../assets/ReactIcon.astro';
import NextJsIcon from '../assets/NextJsIcon.astro';
import AWSIcon from '../assets/AWSIcon.astro';
import FirebaseIcon from '../assets/FirebaseIcon.astro';
import SupabaseIcon from '../assets/SupabaseIcon.astro';
import SQLIcon from '../assets/SQLIcon.astro';
import MongoIcon from '../assets/MongoIcon.astro';
import DockerIcon from '../assets/DockerIcon.astro';
import NPMIcon from '../assets/NPMIcon.astro';
import AndroidIcon from '../assets/AndroidIcon.astro';
import AppleIcon from '../assets/AppleIcon.astro';
---

<article
  id='home'
  class='flex flex-col min-h-screen items-center justify-center'
>
  <section class='sm:w-3/5'>
    <div class='flex flex-col justify-center p-1'>
      <h2 class='text-slate-200 sm:text-4xl text-lg font-semibold'>
        Â¡Hola! ðŸ‘‹
      </h2>
      <h1
        class='text-slate-200 sm:text-5xl text-2xl font-bold sm:my-3 my-1 type-effect'
      >
        Soy <span class='text-blue-200'>Alejandro Morales RÃ­os</span>
      </h1>
      <h3 id='role' class='sm:text-3xl text-xl font-semibold'></h3>
      <p class='sm:mt-12 text-slate-200 sm:text-lg mt-8 text-sm'>
        Apasionado <strong>desarrollador de software</strong> ðŸ’» colombiano con
        un profundo compromiso por la excelencia tÃ©cnica âœ… y creaciÃ³n de
        soluciones de software de alta calidad ðŸŽ¯. Mi enfoque principal radica
        en la implementaciÃ³n de <strong>buenas prÃ¡cticas</strong> y la creaciÃ³n
        de arquitecturas de software robustas y escalables que resuelvan
        problemas de manera eficiente.
      </p>
      <div class='sm:mt-10 mt-4 flex flex-col items-center'>
        <div class='sm:w-2/3 flex flex-wrap gap-2 justify-center'>
          <TechIcon>
            <NodeIcon />
          </TechIcon>
          <TechIcon>
            <TypescriptIcon />
          </TechIcon>
          <TechIcon>
            <HTMLIcon />
          </TechIcon>
          <TechIcon>
            <CSSIcon />
          </TechIcon>
          <TechIcon>
            <ReactIcon />
          </TechIcon>
          <TechIcon>
            <NextJsIcon />
          </TechIcon>
          <TechIcon>
            <AndroidIcon />
          </TechIcon>
          <TechIcon>
            <AppleIcon />
          </TechIcon>
          <TechIcon>
            <SQLIcon />
          </TechIcon>
          <TechIcon>
            <MongoIcon />
          </TechIcon>
          <TechIcon>
            <AWSIcon />
          </TechIcon>
          <TechIcon>
            <SupabaseIcon />
          </TechIcon>
          <TechIcon>
            <FirebaseIcon />
          </TechIcon>
          <TechIcon>
            <DockerIcon />
          </TechIcon>
          <TechIcon>
            <NPMIcon />
          </TechIcon>
        </div>
      </div>
    </div>
  </section>
</article>
<style>
  .type-effect {
    display: block;
    line-height: 1.1;
    font-family: monospace;
    white-space: nowrap;
    border-right: 4px solid;
    width: 27ch;

    animation:
      typing 2s steps(27),
      blink 0.5s infinite step-end alternate;
    overflow: hidden;
  }

  @keyframes typing {
    from {
      width: 0;
    }
  }

  @keyframes blink {
    50% {
      border-color: transparent;
    }
  }
</style>

<script>
  const phrases = [
    {
      text: 'Ingeniero en Sistemas y Telecomunicaciones',
      color: '#1d4ed8',
    },
    { text: 'Desarrollador Frontend', color: '#22c55e' },
    { text: 'Desarrollador Backend', color: '#f59e0b' },
  ];

  const typingElement = document.getElementById('role')!;
  let currentPhraseIndex = 0;

  function typeNextPhrase() {
    typingElement.textContent = '';
    const currentPhrase = phrases[currentPhraseIndex];
    let charIndex = 0;

    typingElement.style.color = currentPhrase.color;

    function typeCharacter() {
      if (charIndex < currentPhrase.text.length) {
        typingElement.textContent += currentPhrase.text.charAt(charIndex);
        charIndex++;
        setTimeout(typeCharacter, 60);
      } else {
        setTimeout(() => {
          currentPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
          typeNextPhrase();
        }, 2000);
      }
    }

    typeCharacter();
  }

  typeNextPhrase();
</script>
